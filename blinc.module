<?php

/**
 * @file
 * Defines the hooks and helper functions for the blinc module.
 */

/**
 * Implements hook_form_FORM_ID_alter().
 *
 * Add context editing the block configuration form.
 */
function blinc_form_block_admin_configure_alter(&$form, &$form_state) {
  // Grab some identifying info from the block edit form.
  $block = array(
    'module' => $form_state['build_info']['args'][0],
    'delta' => $form_state['build_info']['args'][1],
  );

  // If we have contexts that place this block, add a vertical tab for them.
  if ($contexts = blinc_get_block_contexts($block)) {
    $form['visibility']['contexts'] = array(
      '#type' => 'fieldset',
      '#title' => t('Contexts'),
      '#weight' => -10,
      '#collapsible' => TRUE,
      '#collapsed' => FALSE,
      '#tree' => TRUE,
      '#group' => 'visibility',
    );

    // Add a fieldset for each context.
    foreach ($contexts as $key => $context) {
      _blinc_form_attach_context_form($form, $context, $block);
    }

    // Add our submit handler.
    $form['#submit'][] = 'blinc_form_block_admin_configure_submit';
  }
}

/**
 * Processes any contexts from the block configure form.
 */
function blinc_form_block_admin_configure_submit(&$form, &$form_state) {
  // Just return if the block had no contexts.
  if (!isset($form_state['values']['contexts'])) {
    return;
  }

  // Load and process each context.
  foreach ($form_state['values']['contexts'] as $name => $context) {
    $context = context_load($name);
    // Concat the block name used by context.
    $block = $form_state['build_info']['args'][0] . '-' . $form_state['build_info']['args'][1];
    // Handle the processing of the form changes.
    _blinc_context_process($context, $form_state['input']['contexts'][$name], $block);
    // Save the updated context.
    context_save($context);
  }
}

/**
 * Utility function to process our form.
 */
function _blinc_context_process($context, $form, $block) {
  // Build out a new context object based on the original.
  $context->name = isset($form['name']) ? $form['name'] : $context->name;
  $context->description = isset($form['description']) ? $form['description'] : $context->description;
  $context->tag = isset($form['tag']) ? $form['tag'] : $context->tag;
  $context->condition_mode = isset($form['condition_mode']) ? $form['condition_mode'] : $context->condition_mode;
  $context->conditions = array();

  // For any conditions, add/update/remove them. Largely taken from context_ui.
  if (!empty($form['conditions'])) {
    $enabled = explode(',', $form['conditions']['state']);
    foreach ($form['conditions']['plugins'] as $condition => $values) {
      if (in_array($condition, $enabled, TRUE) && ($plugin = context_get_plugin('condition', $condition))) {
        if (isset($values['values'])) {
          $context->conditions[$condition]['values'] = $plugin->condition_form_submit($values['values']);
        }
        if (isset($values['options'])) {
          $context->conditions[$condition]['options'] = $plugin->options_form_submit($values['options']);
        }
        if (context_empty($context->conditions[$condition]['values'])) {
          unset($context->conditions[$condition]);
        }
      }
    }
  }

  // If we updated the region, update it.
  if (isset($form['region'])) {
    $context->reactions['block']['blocks'][$block]['region'] = $form['region'];
  }
  // If we updated the weight, update it.
  if (isset($form['weight'])) {
    $context->reactions['block']['blocks'][$block]['weight'] = $form['weight'];
  }

  // Return an updated context object.
  return $context;
}

/**
 * Utility function to add a form for each context placing a block.
 */
function _blinc_form_attach_context_form(&$form, $context, $block) {

  // Get the default theme so we can generate a list of regions.
  $theme_key = variable_get('theme_default', 'garland');
  $regions = system_region_list($theme_key, REGIONS_VISIBLE);

  // Load all context conditions.
  $conditions = context_conditions();

  // Get a pointer to the fieldset of the current context. Saves typing.
  $context_form =& $form['visibility']['contexts'][$context->name];

  // Build all the elements for the current context form.
  $context_form = array(
    '#type' => 'fieldset',
    '#title' => $context->name,
    '#collapsible' => TRUE,
    '#collapsed' => TRUE,
    '#group' => 'visibility_contexts',
    'condition_mode' => array(
      '#type' => 'checkbox',
      '#default_value' => isset($context->condition_mode) ? $context->condition_mode : FALSE,
      '#title' => t('Require all conditions'),
      '#description' => t('If checked, all conditions must be met for this context to be active. Otherwise, the first condition that is met will activate this context.'),
    ),
    'conditions' => array(
      '#theme' => 'context_ui_plugins',
      '#title' => t('Conditions'),
      '#description' => t('Trigger the activation of this context'),
      '#tree' => TRUE,
      'selector' => array(
        '#type' => 'select',
        '#options' => array(0 => '<' . t('Add a condition') . '>'),
        '#default_value' => 0,
      ),
      'state' => array(
        '#attributes' => array('class' => array('context-plugins-state')),
        '#type' => 'hidden',
      ),
      'plugins' => array('#tree' => TRUE),
    ),
    'region' => array(
      '#type' => 'select',
      '#title' => t('Region'),
      '#options' => $regions,
      '#default_value' => $context->reactions['block']['blocks'][$block['module'] . '-' . $block['delta']]['region'],
      '#description' => t('Select the region that this block will be placed in under the conditions above.'),
    ),
    'weight' => array(
      '#type' => 'select',
      '#title' => t('Weight'),
      '#options' => range(-30, 30, 1),
      '#default_value' => $context->reactions['block']['blocks'][$block['module'] . '-' . $block['delta']]['weight'],
      '#description' => t('Select the blocks weight'),
    ),
  );

  // If the current block of this context has siblings, add list list of them.
  if (count($context->reactions['block']['blocks']) > 1) {
    $context_form['siblings'] = array(
      '#type' => 'item',
      '#title' => t('Siblings'),
      '#prefix' => '<ul>',
      '#markup' => '',
      '#suffix' => '</ul>',
      '#description' => t('These blocks are placed by this context as well.'),
    );
    foreach ($context->reactions['block']['blocks'] as $name => $settings) {
      if ($name != $block['module'] . '-' . $block['delta']) {
        $context_form['siblings']['#markup'] .= sprintf('<li>%s&nbsp;<strong>%s</strong></li>', $name, $settings['weight']);
      }
    }
  }

  // This adds the nested form items for each context condition plugin.
  foreach (array_keys($conditions) as $condition) {
    if ($plugin = context_get_plugin('condition', $condition)) {
      $context_form['conditions']['plugins'][$condition] = array(
        '#tree' => TRUE,
        '#plugin' => $plugin,
        // This flag is used at the theme layer.
        '#context_enabled' => isset($context->conditions[$condition]),
        'values' => $plugin->condition_form($context),
        'options' => $plugin->options_form($context),
      );
      $context_form['conditions']['selector']['#options'][$condition] = $plugin->title;
    }
  }
}

/**
 * Gets all the contexts that place a certain block.
 *
 * @param array $block
 *   An array containing the module and delta of a particular block. 
 *
 * @return mixed
 *   An array of context objects that place a block. NULL if none.
 */
function blinc_get_block_contexts($block) {
  $query = db_select('blinc', 'b');
  $query->join('context', 'c', 'b.context = c.name');

  $result = $query->fields('c', array('name'))
    ->condition('b.module', $block['module'])
    ->condition('b.delta', $block['delta'])
    ->execute();

  while ($context = $result->fetchObject()) {
    $contexts[] = context_load($context->name);
  }

  return (isset($contexts)) ? $contexts : NULL;
}

/**
 * Implements hook_context_registry_alter().
 *
 * Entry point to regenerate our map of blocks to contexts.
 */
function blinc_context_registry_alter($registry) {
  blinc_update_contexts();
}

/**
 * Utility function to update our map of blocks to contexts.
 */
function blinc_update_contexts() {
  // Clear out the blinc table before we rebuild it.
  db_delete('blinc')->execute();

  // Load all contexts.
  $contexts = context_load();

  if (!empty($contexts)) {

    // Create our query object.
    $query = db_insert('blinc')
      ->fields(array('module', 'delta', 'context'));

    $have_blocks = FALSE;

    foreach ($contexts as $context) {

      // If the current context places a block.
      if (_blinc_context_has_block_reaction($context)) {

        // Boolean to know if we should execute our query later.
        $have_blocks = TRUE;

        // Create a mapping of every block placing context to its blocks.
        foreach ($context->reactions['block']['blocks'] as $block) {
          $query->values(array(
            'module' => $block['module'],
            'delta' => $block['delta'],
            'context' => $context->name,
          ));
        }
      }
    }

    // If we really have values, execute our insert.
    if ($have_blocks) {
      $query->execute();
    }
  }
}

/**
 * Utility function to check that a context places a block.
 */
function _blinc_context_has_block_reaction($context) {
  return isset($context->reactions['block']);
}
